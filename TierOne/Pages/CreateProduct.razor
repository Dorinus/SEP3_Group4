@page "/NewProduct"
@using TierOne.Data
@using TierOne.Data.Migrations
@inject IProductManager ProductManager
@inject ICategoryManager CategoryManager
@inject NavigationManager NavigationManager

<h3>Create new product</h3>
<hr/>


@if (CategoriesList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!CategoriesList.Any())
{
    <p>
        <em>No Users exist in the system. Or something went wrong</em>
    </p>
}
else
{

    <EditForm Model="@NewProduct" OnValidSubmit="@CreateNewProduct">
        <DataAnnotationsValidator/> <ValidationSummary/>
        <div class="form-group"> Name:<br/> <InputText @bind-Value="NewProduct.Name"/> </div>


        <div class="form-group"> End Date:<br/> <InputDate rows="4" @bind-Value="Date"/> </div>

        <div class="form-group"> End Time:<br/> <input type="time" @bind="Hour" @bind:format="HH:mm"/></div>

        <div class="form-group"> Price:<br/> <InputNumber rows="4" @bind-Value="NewProduct.Price"/> </div>

        <div class="form-group"> Image URL:<br/> <InputText @bind-Value="NewProduct.PhotoUrl"/> </div>

        <div class="form-group"> Description:<br/> <InputTextArea rows="4" @bind-Value="NewProduct.Description"/> </div>
        <div class="form-group"> Tags:<br/> <InputTextArea text="Separate by comma" rows="5" @bind-Value="Tags"/> </div>

        @foreach (var item in CategoriesList)
        {
            <input type="checkbox" @onchange="@((arg) => SelectedCategories(arg, item))"/>
            @item.CategoryName
            <br/>
        }

        @foreach (var cat in SelectedCategoriesList)
        {
            @cat.CategoryName
        }




        <p class="actions">
            <button class="btn btn-outline-dark" @onclick="CreateNewProduct" type="submit">Create new product</button>
        </p>
    </EditForm>
}

@code {
    private Product NewProduct = new Product();
    private DateTime Date = DateTime.Now;
    private DateTime Hour = DateTime.Now;
    private IList<Category> CategoriesList;
    private IList<Category> SelectedCategoriesList = new List<Category>();
    private String Tags = "";


    protected override async Task OnInitializedAsync()
    {
        CategoriesList = await CategoryManager.GetCategories();
        
    }


    private async void CreateNewProduct()
    {
        GetTags();
        
        bool response = await ProductManager.CreateProduct(NewProduct);
        if (response)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    

    // Gets selected categoories
    private void SelectedCategories(ChangeEventArgs changeEventArgs, Category item)
    {
        if (SelectedCategoriesList.Contains(item))
        {
            SelectedCategoriesList.Remove(item);
        }
        else
        {
            SelectedCategoriesList.Add(item);
        }
    }
    
    
    // Gets and formats tags
    private void GetTags()
    {
        NewProduct.Tags = Tags.Split(',').Select(tag => tag.Trim()).ToList();
        NewProduct.Tags = NewProduct.Tags.Where(x => !string.IsNullOrEmpty(x)).ToArray();

        foreach (var tag in NewProduct.Tags)
        {
            Console.WriteLine(tag);
        }
    }

}