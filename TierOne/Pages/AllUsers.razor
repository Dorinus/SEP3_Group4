@page "/AllUsers"
@using TierOne.Data
@inject IUserManager UserManager
@inject IJSRuntime jsRuntime


<h3>All Users. Page: @PageNumber</h3>


@if (users == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!users.Any())
{
    <p>
        <em>No Users exist in the system. Or something went wrong</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th> <th>UserName</th> <th>Email</th> <th>FirstName</th>
            <th>LastName</th> <th>Address</th> <th>PostalIndex</th> <th>Dob</th>
            <th>Type</th>

            <AuthorizeView Policy="OnlyAdmin">
                <th>Change Type</th>
                <th>Delete</th>
            </AuthorizeView>

        </tr>
        </thead>
        <tbody>
        @foreach (var item in  users)
        {
            <tr>
                <td>@item.Id</td> <td>@item.UserName</td> <td>@item.Email</td> <td>@item.FirstName</td>
                <td>@item.LastName</td> <td>@item.Address</td> <td>@item.PostalIndex</td> <td>@item.Dob</td>
                <td>@item.Type</td>

                <AuthorizeView Policy="OnlyAdmin">
                    <td>
                        <button @onclick="@(() => ChangeUserType(item.Id))">
                            <i class="oi oi-person" style="color:blue"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(() => RemoveUser(item.Id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>

                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>

    <button @onclick="@(() => backPage())">
        <i class="oi oi-chevron-left" style="color:blue"/>
    </button>
    <button @onclick="@(() => nextPage())">
        <i class="oi oi-chevron-right" style="color:blue"/>
    </button>
}



@code {

    [Parameter]
    public int PageNumber { get; set; } =  1;

    private IList<User> users;

    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.GetUsers(PageNumber);
    }

    private async void RemoveUser(int userId)
    {
        bool response = await UserManager.RemoveUser(userId);

        if (response)
        {
            User user = users.First(t => t.Id == userId);
            users.Remove(user);
        }
        else
        {
    //TO DO write an error message
        }
    }

    private async void ChangeUserType(int userId)
    {
        String response = await UserManager.ChangeUserType(userId);

        User user = users.First(t => t.Id == userId);
        if (user.Type.Equals("user"))
        {
            response = "manager";
        }
        else
        {
            response = "user";
        }
        users.First(t => t.Id == userId).Type = response;
    }


    // go back
    private async void backPage()
    {
        // makes sure page doesnt go lower then 1
        if (PageNumber > 1)
        {
            bool PageExist = await UserManager.PageExist(PageNumber);
            if (PageExist)
            {
                PageNumber--;
                users = await UserManager.GetUsers(PageNumber);
                
                // should change url
                jsRuntime.InvokeVoidAsync("ChangeUrl", PageNumber.ToString());
            }
        }
    }

    // go next page
    private async void nextPage()
    {
        // checks for existance of page
        bool PageExist = await UserManager.PageExist(PageNumber);
        
        // if it exist loads next page
        if (PageExist)
        {
            PageNumber++;
            users = await UserManager.GetUsers(PageNumber);
        } 
        
    }

}