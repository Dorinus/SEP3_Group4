@page "/ViewBids"
@using TierOne.Data
@using TierOne.Data.Interfaces
@inject IProductManager ProductManager
@inject IBidManager BidManager
@inject AuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager



<h3>View Bids</h3>

@if (products == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!products.Any())
{
    <p>
        <em>No Products exist in the system. Or something went wrong</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <AuthorizeView Policy="manager">
                <th>Product ID</th>
            </AuthorizeView>
            <th>Name</th>
            <th>Date</th>
            <th>Price</th>
            <th>Show Product</th>

            

        </tr>
        </thead>
        <tbody>
        @foreach (var item in  products)
        {
            <tr>
                <AuthorizeView Policy="manager">
                    <td>@item.Id</td>
                </AuthorizeView>
                <td>@item.Name</td>
                <td>@item.Date.Day.ToString()</td>
                <td>@item.Price</td>
                <td>
                    <button @onclick="@(() => ShowProduct(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>

                
            </tr>
        }
        </tbody>
    </table>

    <button @onclick="@(() => BackPage())">
        <i class="oi oi-chevron-left" style="color:blue"/>
    </button>
    <button @onclick="@(() => NextPage())">
        <i class="oi oi-chevron-right" style="color:blue"/>
    </button>
}

@code {

    [Parameter]
    public int PageNumber { get; set; } = 1;

    private IList<Product> products;

    protected override async Task OnInitializedAsync()
    {

        var userId = ((CustomAuthenticationStateProvider)CustomAuthenticationStateProvider).GetUserId();
        products = await BidManager.GetUserBids(userId);
    }


    // go back
    private async void BackPage()
    {
    // makes sure page doesnt go lower then 1
        if (PageNumber > 1)
        {
            bool pageExist = await ProductManager.PageExist(PageNumber);
            if (pageExist)
            {
                PageNumber--;
                products = await ProductManager.GetActiveProducts(PageNumber);
            }
        }
    }

    // go next page
    private async void NextPage()
    {
    // checks for existance of page
        bool pageExist = await ProductManager.PageExist(PageNumber);

    // if it exist loads next page
        if (pageExist)
        {
            PageNumber++;
            products = await ProductManager.GetActiveProducts(PageNumber);
        }
    }


    private void ShowProduct(int itemId)
    {
        NavigationManager.NavigateTo($"bid/{itemId}");
    }

}